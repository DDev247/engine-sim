import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)
label cycle180(180 * units.deg)

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
}

private node Datsun_100A_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 7250 * units.rpm;
    input limiter_duration: 0.20 * units.sec;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, (0.0 / 4) * cycle)
            .connect_wire(wires.wire3, (1.0 / 4) * cycle)
            .connect_wire(wires.wire4, (2.0 / 4) * cycle)
            .connect_wire(wires.wire2, (3.0 / 4) * cycle);
}

private node add_sym_sample {
    input angle;
    input lift;
    input this;
    alias output __out: this;

    this.add_sample(angle * units.deg, lift * units.thou)
    this.add_sample(-angle * units.deg, lift * units.thou)
}

private node Datsun_100A_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 160 * units.deg,
            gamma: 1,
            lift: 200 * units.thou,
            steps: 100
        );
}

private node Datsun_100A_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 160 * units.deg,
            gamma: 1,
            lift: 200 * units.thou,
            steps: 100
        );
}

private node Datsun_100A_camshaft_builder {
    input lobe_profile: Datsun_100A_lobe_profile_int();
    input ex_lobe_profile: Datsun_100A_lobe_profile_exh();
    input intake_lobe_profile: lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input lobe_separation: 108.5 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: lobe_separation;
    input advance: 0 * units.deg;
    input base_radius: 0.6 * units.inch;

    output intake_cam_0: _intake_cam_0;
    output exhaust_cam_0: _exhaust_cam_0;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)

    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

    _exhaust_cam_0 
		.add_lobe(rot360 - exhaust_lobe_center)
        .add_lobe(rot360 - exhaust_lobe_center + 3 * rot180)
        .add_lobe(rot360 - exhaust_lobe_center + rot180)
        .add_lobe(rot360 - exhaust_lobe_center + 2 * rot180)
        
    
	_intake_cam_0
		.add_lobe(rot360 + intake_lobe_center)
        .add_lobe(rot360 + intake_lobe_center + 3 * rot180)
        .add_lobe(rot360 + intake_lobe_center + rot180)
        .add_lobe(rot360 + intake_lobe_center + 2 * rot180)
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.mm, k_28inH2O(flow))
}

private node Datsun_100A_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 29.1 * units.cc;
    input flip_display: true;

    input flow_attenuation: 1;
    input lift_scale: 1;
    alias output __out: head;

    function intake_flow(50 * units.thou)
    intake_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 34 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 62 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 104 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 130 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 140 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 148 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 152 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 154 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 158 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 166 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 172 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 180 * flow_attenuation)

    function exhaust_flow(50 * units.thou)
    exhaust_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 22 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 33 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 60 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 76 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 86 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 92 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 90 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 88 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 84 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 87 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 87 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 87 * flow_attenuation)


    cylinder_head head(
        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}

public node Datsun_100A {
    alias output __out: engine;

    engine engine(
        name: "Datsun 100A",
        starter_torque: 50 * units.lb_ft,
        starter_speed: 250 * units.rpm,
        redline: 7250 * units.rpm,
        simulation_frequency: 5000,
        fuel: fuel(
                    max_turbulence_effect: 3.2,
            burning_efficiency_randomness: 0.75,
            max_burning_efficiency: 1.65)
    )

    wires wires()

    label stroke(59 * units.mm)
    label rod_length(133 * units.mm)
    label compression_height(32.58 * units.mm)
    label bore(73 * units.mm)
    label rod_mass(87 * units.mm)
    label crank_mass(8 * units.kg)
    label flywheel_mass(13 * units.kg)
    label flywheel_radius(118 * units.mm)

label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment(
        disk_moment_of_inertia(mass: 1 * units.kg, radius: 1.0 * units.cm)
    )

    crankshaft c1(
        throw: 29.5 * units.mm,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 10 * units.lb_ft,
        moment_of_inertia:
            crank_moment + flywheel_moment + other_moment,
        position_x: 0,
        position_y: 0, //This was at 0.03 before I changed the compression height (which used to be at 13 * units.mm)
        tdc: constants.pi / 2
    )

    rod_journal rj0(angle: 0)
    rod_journal rj1(angle: 3 * cycle180)
    rod_journal rj2(angle: 1 * cycle180)
    rod_journal rj3(angle: 2 * cycle180)

    c1
        .add_rod_journal(rj0)
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)

    piston_parameters piston_params0(
        mass: 436 * units.g,
        compression_height: compression_height,
        wrist_pin_position: 0,
        displacement: 0
    )

    connecting_rod_parameters cr_params0(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    intake intake(
        plenum_volume: 0.6422 * units.L,
        intake_flow_rate: k_carb(202),
        runner_flow_rate: k_carb(202),
        runner_length: 10.3 * units.inch, // 17.8 cm
        idle_flow_rate: k_carb(0),
        idle_throttle_plate_position: 0.995,
        throttle_gamma: 1

    )

    exhaust_system_parameters es_params0(
        outlet_flow_rate: k_carb(350),
        primary_tube_length: 1 * units.inch,
        primary_flow_rate: k_carb(350),
        velocity_decay: 1, //0.5
        volume: 10 * units.L
    )
	
	exhaust_system exhaust0(es_params0, audio_volume: 0.7, impulse_response: ir_lib.default_0)

    cylinder_bank b1(
    bore: bore,
    deck_height: 179.1 * units.mm,
    angle: 0 * units.deg
    )
    b1
        .add_cylinder(
            piston: piston(piston_params0, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params0),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire1
        )
        .add_cylinder(
            piston: piston(piston_params0, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params0),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire2
        )
        .add_cylinder(
            piston: piston(piston_params0, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params0),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire3
        )
        .add_cylinder(
            piston: piston(piston_params0, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params0),
            rod_journal: rj3,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire4
        )
    engine.add_cylinder_bank(b1)

    engine.add_crankshaft(c1)

    Datsun_100A_camshaft_builder camshaft(
        lobe_profile: Datsun_100A_lobe_profile_int(),
	       ex_lobe_profile: Datsun_100A_lobe_profile_exh()
    )

    b1.set_cylinder_head (
        Datsun_100A_head(
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 10 * units.deg)
        .add_sample(1000 * units.rpm, 15 * units.deg)
        .add_sample(2000 * units.rpm, 20 * units.deg)
        .add_sample(3000 * units.rpm, 25 * units.deg)
        .add_sample(4000 * units.rpm, 30 * units.deg)
        .add_sample(5000 * units.rpm, 35 * units.deg)
        .add_sample(6000 * units.rpm, 35 * units.deg)
        .add_sample(7000 * units.rpm, 35 * units.deg)

    engine.add_ignition_module(
        Datsun_100A_distributor(
            wires: wires,
            timing_curve: timing_curve,
            rev_limit: 7250 * units.rpm
        )
    )
}
