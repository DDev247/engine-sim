import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

float airfuel_ratio(14.7)

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
}

label cycle(2 * 360 * units.deg)
public node i4_ignition {
    input wires;
    input timing_curve;
    input rev_limit: 11000 * units.rpm;
    alias output __out:
        ignition_module(
            timing_curve: timing_curve,
            rev_limit: rev_limit,
            limiter_duration: 0.08
        )
            .connect_wire(wires.wire1, (0.0 / 4.0) * cycle)
            .connect_wire(wires.wire2, (1.0 / 4.0) * cycle)
            .connect_wire(wires.wire4, (2.0 / 4.0) * cycle)
            .connect_wire(wires.wire3, (3.0 / 4.0) * cycle);

}

public node i4_camshaft_builder {
    input lobe_profile;
    input intake_lobe_profile: lobe_profile;
    input exhaust_lobe_profile: lobe_profile;
    input lobe_separation: 100.0 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: lobe_separation;
    input advance: 0 * units.deg;
    input base_radius: 1 * units.inch;

    output intake_cam: _intake_cam;
    output exhaust_cam: _exhaust_cam;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam(params, lobe_profile: exhaust_lobe_profile)

    label rot(2 * (360 / 5.0) * units.deg)
    label rot360(360 * units.deg)

    _exhaust_cam
        .add_lobe(rot360 - exhaust_lobe_center - (0.0 / 4) * cycle)
        .add_lobe(rot360 - exhaust_lobe_center - (3.0 / 4) * cycle)
        .add_lobe(rot360 - exhaust_lobe_center - (1.0 / 4) * cycle)
        .add_lobe(rot360 - exhaust_lobe_center - (2.0 / 4) * cycle)

    _intake_cam
        .add_lobe(rot360 + intake_lobe_center - (0.0 / 4) * cycle)
        .add_lobe(rot360 + intake_lobe_center - (3.0 / 4) * cycle)
        .add_lobe(rot360 + intake_lobe_center - (1.0 / 4) * cycle)
        .add_lobe(rot360 + intake_lobe_center - (2.0 / 4) * cycle)
}

private node toyota_i4_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 33.8 * units.cc;
    input intake_runner_volume: 0.142 * units.L;
    input intake_runner_cross_section_area: 5.00 * units.cm2;
    input exhaust_runner_volume: 0.072 * units.L;
    input exhaust_runner_cross_section_area: 3.8 * units.cm2;

    input flow_attenuation: 1.0;
    input lift_scale: 1.0;
    input flip_display: false;
    alias output __out: head;

    function intake_flow(50 * units.thou)
    intake_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(50 * lift_scale, 33.2 * flow_attenuation)
        .add_flow_sample(100 * lift_scale, 81 * flow_attenuation)
        .add_flow_sample(150 * lift_scale, 124 * flow_attenuation)
        .add_flow_sample(200 * lift_scale, 158 * flow_attenuation)
        .add_flow_sample(250 * lift_scale, 184 * flow_attenuation)
        .add_flow_sample(300 * lift_scale, 199 * flow_attenuation)
        .add_flow_sample(350 * lift_scale, 212 * flow_attenuation)
        .add_flow_sample(400 * lift_scale, 221 * flow_attenuation)
        .add_flow_sample(450 * lift_scale, 227 * flow_attenuation)

    function exhaust_flow(50 * units.thou)
    exhaust_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(50 * lift_scale, 39 * flow_attenuation)
        .add_flow_sample(100 * lift_scale, 89 * flow_attenuation)
        .add_flow_sample(150 * lift_scale, 136 * flow_attenuation)
        .add_flow_sample(200 * lift_scale, 157 * flow_attenuation)
        .add_flow_sample(250 * lift_scale, 168 * flow_attenuation)
        .add_flow_sample(300 * lift_scale, 175 * flow_attenuation)
        .add_flow_sample(350 * lift_scale, 177 * flow_attenuation)
        .add_flow_sample(400 * lift_scale, 178 * flow_attenuation)
        .add_flow_sample(450 * lift_scale, 180 * flow_attenuation)

    generic_cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: intake_runner_volume,
        intake_runner_cross_section_area: intake_runner_cross_section_area,
        exhaust_runner_volume: exhaust_runner_volume,
        exhaust_runner_cross_section_area: exhaust_runner_cross_section_area,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        valvetrain: standard_valvetrain(
            intake_camshaft: intake_camshaft,
            exhaust_camshaft: exhaust_camshaft
        ),
        flip_display: flip_display
    )
}

public node t4age {
    alias output __out: engine;

    wires wires()

    engine engine(
        name: "4AGE 16v ITB       11K/rpm --",
        starter_torque: 600 * units.lb_ft,
        starter_speed:  400 * units.rpm,
        redline: 11000 * units.rpm,
        fuel: fuel(
            max_turbulence_effect: 2.0,
            burning_efficiency_randomness: 1.0,
            max_burning_efficiency: 0.85
        ),
        throttle_gamma: 1.8,
		hf_gain: 0.01817,
		jitter: 1.0,
        simulation_frequency: 10000 //19000 <- apply if you can handle it
    )

    label stroke(77 * units.mm)
    label bore(81.5 * units.mm)
    label rod_length(4.803 * units.inch)
    label rod_mass(513 * units.g)
	label piston_mass(288 * units.g)
    label compression_height(1.208 * units.inch)
    label crank_mass(14.43053 * units.kg)
    label flywheel_mass(11.775 * units.kg)
    label flywheel_radius(7.87 * units.inch)

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass + rod_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 6 * units.kg, radius: 38.5 * units.mm)
    )

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 11.0 * units.lb_ft,
        moment_of_inertia: crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 20.6
    )

    rod_journal rj0(angle: 0.0 * units.deg)
    rod_journal rj1(angle: 180.0 * units.deg)
    rod_journal rj2(angle: 180.0 * units.deg)
    rod_journal rj3(angle: 0.0 * units.deg)

    c0
        .add_rod_journal(rj0)
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)

    piston_parameters piston_params(
        mass: piston_mass,
        blowby: 0.006,
        compression_height: compression_height,
        wrist_pin_position: 0,
        displacement: 7.5 * units.cc
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass + piston_mass,
            length: rod_length + compression_height
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: 7.519 * units.inch + 0.8 * units.mm

    )
	intake intake0(
	    plenum_volume: 400 * units.cc,
        plenum_cross_section_area: 5.00 * units.cm2,
        intake_flow_rate: k_carb(320.0),
        runner_flow_rate: k_carb(227.0),
        runner_length: 290 * units.mm,
        idle_flow_rate: k_carb(0.01),
		velocity_decay: 1.0,
		molecular_afr: airfuel_ratio,
        idle_throttle_plate_position: 0.9987
    )
    intake intake1(
	    plenum_volume: 400 * units.cc,
        plenum_cross_section_area: 5.00 * units.cm2,
        intake_flow_rate: k_carb(320.0),
        runner_flow_rate: k_carb(227.0),
        runner_length: 290 * units.mm,
        idle_flow_rate: k_carb(0.01),
		velocity_decay: 1.0,
		molecular_afr: airfuel_ratio,
        idle_throttle_plate_position: 0.9987
    )
    intake intake2(
	    plenum_volume: 400 * units.cc,
        plenum_cross_section_area: 5.00 * units.cm2,
        intake_flow_rate: k_carb(320.0),
        runner_flow_rate: k_carb(227.0),
        runner_length: 290 * units.mm,
        idle_flow_rate: k_carb(0.01),
		velocity_decay: 1.0,
		molecular_afr: airfuel_ratio,
        idle_throttle_plate_position: 0.9987
    )
    intake intake3(
	    plenum_volume: 400 * units.cc,
        plenum_cross_section_area: 5.00 * units.cm2,
        intake_flow_rate: k_carb(320.0),
        runner_flow_rate: k_carb(227.0),
        runner_length: 290 * units.mm,
        idle_flow_rate: k_carb(0.01),
		velocity_decay: 1.0,
		molecular_afr: airfuel_ratio,
        idle_throttle_plate_position: 0.9987
	)	

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(720.0),
        primary_flow_rate: k_carb(360.0),
		collector_cross_section_area: circle_area(42.7 * units.mm),
        velocity_decay: 1.0,
        volume: 2.454 * units.L
    )

    impulse_response ir0(filename: "../../new/minimal_muffling_02.wav", volume: 0.01)

    exhaust_system exhaust0(
        es_params, 
		audio_volume: 18.0, 
		collector_cross_section_area: circle_area(60 * units.mm),
		//length: 132 * units.inch,
		//impulse_response: ir_lib.minimal_muffling_02
        impulse_response: ir_lib.default_0//,
        )
		
		

    cylinder_bank b0(bank_params, angle: 0)
    b0

	.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.001)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake0,
            exhaust_system: exhaust0,
			//primary_length: 28.0 * units.inch,
            ignition_wire: wires.wire1,
            sound_attenuation: 0.5
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.001)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake1,
            exhaust_system: exhaust0,
			//primary_length: 28.0 * units.inch,
            ignition_wire: wires.wire2,
            sound_attenuation: 1.0
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.001)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake2,
            exhaust_system: exhaust0,
			//primary_length: 28.0 * units.inch,
            ignition_wire: wires.wire3,
            sound_attenuation: 0.7
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.001)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            intake: intake3,
            exhaust_system: exhaust0,
			//primary_length: 28.0 * units.inch,
            ignition_wire: wires.wire4,
            sound_attenuation: 1.7
        )

    engine
        .add_cylinder_bank(b0)

    engine.add_crankshaft(c0)

    harmonic_cam_lobe intake_lobe(
        duration_at_50_thou: 272 * units.deg,
        gamma: 1.0,
        lift: 11.00 * units.mm,
        steps: 314
    )

    harmonic_cam_lobe exhaust_lobe(
        duration_at_50_thou: 262 * units.deg,
        gamma: 1.0,
        lift: 10.10 * units.mm,
        steps: 308
    )

    i4_camshaft_builder camshaft(
        lobe_profile: "N/A",

        intake_lobe_profile: intake_lobe,
        exhaust_lobe_profile: exhaust_lobe,
        intake_lobe_center: 98 * units.deg,
        exhaust_lobe_center: 103 * units.deg,
        base_radius: (35.5 / 2) * units.mm
    )

    b0.set_cylinder_head (
        toyota_i4_head(
            chamber_volume: 33.8 * units.cc,
            intake_camshaft: camshaft.intake_cam,
            exhaust_camshaft: camshaft.exhaust_cam,
            flow_attenuation: 1.0
        )
    )

      function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 28 * units.deg)
        .add_sample(1000 * units.rpm, 28 * units.deg)
        .add_sample(2000 * units.rpm, 28 * units.deg)
        .add_sample(3000 * units.rpm, 28 * units.deg)
        .add_sample(4000 * units.rpm, 28 * units.deg)
        .add_sample(5000 * units.rpm, 28 * units.deg)
        .add_sample(6000 * units.rpm, 28 * units.deg)
        .add_sample(7000 * units.rpm, 28 * units.deg)
        .add_sample(8000 * units.rpm, 28 * units.deg)
	.add_sample(9000 * units.rpm, 28 * units.deg)
        .add_sample(10000 * units.rpm, 30 * units.deg)
        .add_sample(11000 * units.rpm, 36 * units.deg)

    engine.add_ignition_module(
        i4_ignition(
            wires: wires,
            timing_curve: timing_curve,
            rev_limit: 11000 * units.rpm
        )
    )
}

private node ae86 {
    alias output __out:
        vehicle(
            mass: 970 * units.kg,
            drag_coefficient: 0.1,
            cross_sectional_area: (168.7 * units.inch) * (63.976 * units.inch),
            diff_ratio: 4.3,
            tire_radius: 12 * units.inch,
            rolling_resistance: 100 * units.N
        );
}

private node ae86t {
    alias output __out:
        transmission(
            max_clutch_torque: 500 * units.lb_ft
        )
        .add_gear(3.587)
        .add_gear(2.022)
        .add_gear(1.384)
        .add_gear(1.0)
        .add_gear(0.861);
}

public node main {
    set_engine(t4age())
    set_vehicle(ae86())
    set_transmission(ae86t())
}
