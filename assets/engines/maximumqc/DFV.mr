import "engine_sim.mr"
private import "../../themes/default.mr"
private import "part-library/part_library.mr"
private import "types/atomic_types.mr"
private import "types/conversions.mr"
private import "types/operations.mr"
private import "constants/units.mr"
private import "actions/actions.mr"


units units()
constants constants()
impulse_response_library ir_lib()

float airfuel_ratio(15)
label used_fuel(AvGas)

 fuel AvGas(
    name: "AvGas",
    molecular_mass: 185 * units.g,
    energy_density: 45.0 * units.kJ / units.g,
    density: 720 * units.g / units.L,
    molecular_afr: 15,
    max_burning_efficiency: 0.8,
    burning_efficiency_randomness: 0.5,
    low_efficiency_attenuation: 0.6,
    max_turbulence_effect: 2.0,
    max_dilution_effect: 10.0

    )

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
    output wire7: ignition_wire();
    output wire8: ignition_wire();
}
private node add_sym_sample {
    input angle;
    input lift;
    input this;
    alias output __out: this;

    this.add_sample(angle * units.deg, lift * units.thou)
    this.add_sample(-angle * units.deg, lift * units.thou)
}

 public node stock_454_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 279 * units.deg,
            gamma: 2.0,
            lift: 0.657 * units.inch,
            steps: 100
        );
}

 public node stock_454_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 279 * units.deg,
            gamma: 2.0,
            lift: 0.655 * units.inch,
            steps: 100
        );
}
label cycle(2 * 360 * units.deg)
label one(135 * units.deg)
label two(315 * units.deg)
label three(315 * units.deg)
label four(135 * units.deg)

public node chevy_bbc_camshaft_builder {
    input lobe_profile: stock_454_intake_lobe_profile();
    input intake_lobe_profile: stock_454_lobe_profile_int();
    input exhaust_lobe_profile: stock_454_lobe_profile_exh();
    input lobe_separation: 82.0 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: lobe_separation;
    input advance: 0.0 * units.deg;
    input base_radius: 0.75 * units.inch;

    output intake_cam_0: _intake_cam_0;
    output intake_cam_1: _intake_cam_1;
    output exhaust_cam_0: _exhaust_cam_0;
    output exhaust_cam_1: _exhaust_cam_1;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
)


    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
    camshaft _intake_cam_1(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)
    camshaft _exhaust_cam_1(params, lobe_profile: exhaust_lobe_profile)

    label v(-90 * units.deg)
    label rot360(360 * units.deg)
	label offset(1.0)

    _exhaust_cam_0
        .add_lobe(rot360 - exhaust_lobe_center + one + v)
        .add_lobe(rot360 - exhaust_lobe_center + two + v + rot360)
        .add_lobe(rot360 - exhaust_lobe_center + three + v)
        .add_lobe(rot360 - exhaust_lobe_center + four + v + rot360)

    _exhaust_cam_1
        .add_lobe(rot360 - exhaust_lobe_center + one + rot360)
        .add_lobe(rot360 - exhaust_lobe_center + two)
        .add_lobe(rot360 - exhaust_lobe_center + three + rot360)
        .add_lobe(rot360 - exhaust_lobe_center + four)

    _intake_cam_0
        .add_lobe(rot360 + intake_lobe_center + one + v)
        .add_lobe(rot360 + intake_lobe_center + two + v + rot360)
        .add_lobe(rot360 + intake_lobe_center + three + v)
        .add_lobe(rot360 + intake_lobe_center + four + v + rot360)

    _intake_cam_1
        .add_lobe(rot360 + intake_lobe_center + one + rot360)
        .add_lobe(rot360 + intake_lobe_center + two)
        .add_lobe(rot360 + intake_lobe_center + three + rot360)
        .add_lobe(rot360 + intake_lobe_center + four)
}

public node performer_rpm_intake {
    input carburetor_cfm: 690;
    input idle_flow_rate_cfm: 0.21;
    input idle_throttle_plate_position: 0.9918;
    input throttle_gamma: 1.0;

    alias output __out: intake;

    intake intake(
        intake_flow_rate: k_carb(carburetor_cfm),
        idle_flow_rate: k_carb(idle_flow_rate_cfm),
        idle_throttle_plate_position: idle_throttle_plate_position,
        throttle_gamma: throttle_gamma,
        runner_flow_rate: k_carb(400),
		runner_length: 1.35 * units.inch,
        velocity_decay: 0.1,
		molecular_afr: airfuel_ratio
    )
}

public node generic_small_engine_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 32 * units.cc;
    input intake_runner_volume: 374.1 * units.cc;
    input intake_runner_cross_section_area: 13.35481 * units.cm2;
    input exhaust_runner_volume: 374.1 * units.cc;
    input exhaust_runner_cross_section_area: 13.35481 * units.cm2;

    input flow_attenuation: 1.0;
    input lift_scale: 1.0;
    input flip_display: false;
    alias output __out: head;

    function intake_flow(50 * units.thou)
    intake_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(50 * lift_scale, 45 * flow_attenuation)
        .add_flow_sample(100 * lift_scale, 80 * flow_attenuation)
        .add_flow_sample(150 * lift_scale, 100 * flow_attenuation)
        .add_flow_sample(200 * lift_scale, 140 * flow_attenuation)
        .add_flow_sample(250 * lift_scale, 188 * flow_attenuation)
        .add_flow_sample(300 * lift_scale, 205 * flow_attenuation)
        .add_flow_sample(350 * lift_scale, 220 * flow_attenuation)
        .add_flow_sample(400 * lift_scale, 260 * flow_attenuation)
        .add_flow_sample(450 * lift_scale, 278 * flow_attenuation)
        .add_flow_sample(500 * lift_scale, 295 * flow_attenuation)
        .add_flow_sample(550 * lift_scale, 298 * flow_attenuation)
        .add_flow_sample(600 * lift_scale, 300 * flow_attenuation)
        .add_flow_sample(650 * lift_scale, 310 * flow_attenuation)
        .add_flow_sample(700 * lift_scale, 320 * flow_attenuation)

    function exhaust_flow(50 * units.thou)
    exhaust_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(50 * lift_scale, 36 * flow_attenuation)
        .add_flow_sample(100 * lift_scale, 64 * flow_attenuation)
        .add_flow_sample(150 * lift_scale, 80 * flow_attenuation)
        .add_flow_sample(200 * lift_scale, 112 * flow_attenuation)
        .add_flow_sample(250 * lift_scale, 150 * flow_attenuation)
        .add_flow_sample(300 * lift_scale, 164 * flow_attenuation)
        .add_flow_sample(350 * lift_scale, 176 * flow_attenuation)
        .add_flow_sample(400 * lift_scale, 208 * flow_attenuation)
        .add_flow_sample(450 * lift_scale, 222 * flow_attenuation)
        .add_flow_sample(500 * lift_scale, 236 * flow_attenuation)
        .add_flow_sample(550 * lift_scale, 238 * flow_attenuation)
        .add_flow_sample(600 * lift_scale, 244 * flow_attenuation)
        .add_flow_sample(650 * lift_scale, 250 * flow_attenuation)
        .add_flow_sample(700 * lift_scale, 260 * flow_attenuation)

    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: intake_runner_volume,
        intake_runner_cross_section_area: intake_runner_cross_section_area,
        exhaust_runner_volume: exhaust_runner_volume,
        exhaust_runner_cross_section_area: exhaust_runner_cross_section_area,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}

public node chevy_bbc_distributor {
    input wires;
	input timing_curve;
    input rev_limit: 11000 * units.rpm;
    input limiter_duration: 0.05;
	
    alias output __out:
		ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, (0.0 / 8.0) * cycle)
            .connect_wire(wires.wire8, (1.0 / 8.0) * cycle)
            .connect_wire(wires.wire3, (2.0 / 8.0) * cycle)
            .connect_wire(wires.wire6, (3.0 / 8.0) * cycle)
            .connect_wire(wires.wire4, (4.0 / 8.0) * cycle)
            .connect_wire(wires.wire5, (5.0 / 8.0) * cycle)
            .connect_wire(wires.wire2, (6.0 / 8.0) * cycle)
            .connect_wire(wires.wire7, (7.0 / 8.0) * cycle);
}
vehicle vehicle(
		mass: 605 * units.kg,
		drag_coefficient: 0.25,
		cross_sectional_area: (2700 * units.mm) * (1500 * units.mm),
		diff_ratio: 6.3,
		tire_radius: 26 * units.inch,
		rolling_resistance: 1700 * 9.8 * 0.003		//mass * gravity * friction_coefficient
	)

	private node vehicle_gearbox {
		alias output __out:
			transmission(max_clutch_torque: 400 * units.lb_ft)
			.add_gear(2.29)
            .add_gear(2.00)
            .add_gear(1.79)
            .add_gear(1.65)
            .add_gear(1.56)
            .add_gear(1.37);
	}

public node DFV {
    alias output __out: engine;

    engine engine(
        name: "(1978) F1 Cosworth V8 DFV ",		
        starter_torque: 800 * units.lb_ft,
        redline: 11000 * units.rpm,
        fuel: used_fuel
		
    )


    crankshaft c0(
        throw: 2.550 * units.inch / 2.0 ,
        flywheel_mass: 5 * units.lb,
        mass: 32 * units.lb,
        friction_torque: 2.0 * units.lb_ft,
        moment_of_inertia: 0.02986844776863666 * 1,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 45 * units.deg
    )
	
	wires wires()

    rod_journal rj0(one)
    rod_journal rj1(two)
    rod_journal rj2(three)
    rod_journal rj3(four)

    c0
        .add_rod_journal(rj0)
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)

    piston_parameters piston_params(
        mass: 358 * units.g,
        blowby: 0,
        compression_height: 1.469 * units.inch,
        wrist_pin_position: 0.0,
        displacement: 0 * units.cc
    )

    connecting_rod_parameters cr_params(
        mass: 785.0 * units.g,
        moment_of_inertia: 0.0015884918028487504,
        center_of_mass: 0.0,
        length: 5.23 * units.inch
    )

    cylinder_bank_parameters bank_params(
        bore: 3.373 * units.inch,
        deck_height: (1.469 + 5.23) * units.inch + 2.550 * units.inch / 2.00
    )

    performer_rpm_intake intake()

    exhaust_system_parameters es_params0(
        outlet_flow_rate: k_carb(502.26),
        primary_tube_length: 23.5 * units.inch,
        primary_flow_rate: k_carb(502.26),
        velocity_decay: 0.5, //0.5
        volume: 13.914 * units.L
    )
	exhaust_system_parameters es_params1(
        outlet_flow_rate: k_carb(502.26),
        primary_tube_length: 23.5 * units.inch,
        primary_flow_rate: k_carb(502.26),
        velocity_decay: 0.5, //0.5
        volume: 13.914 * units.L
    )

    exhaust_system exhaust0(es_params0, audio_volume: 1.0, impulse_response: ir_lib.default_0)
    exhaust_system exhaust1(es_params1, audio_volume: 0.6, impulse_response: ir_lib.default_0)

    cylinder_bank b0(bank_params, angle: 45 * units.deg)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire1,
			sound_attenuation: 0.1
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire2,
			sound_attenuation: 0.4
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire3,
			sound_attenuation: 0.2
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire4,
			sound_attenuation: 0.3
        )

    cylinder_bank b1(bank_params, angle: -45.0 * units.deg)
    b1
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire5,
			sound_attenuation: 0.4
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire6,
			sound_attenuation: 0.3
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire7,
			sound_attenuation: 0.1
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire8,
			sound_attenuation: 0.2
        )

    engine
        .add_cylinder_bank(b0)
        .add_cylinder_bank(b1)

    engine.add_crankshaft(c0)
	
	harmonic_cam_lobe lobe(
        duration_at_50_thou: 201 * units.deg,
        gamma: 1.1,
        lift: 0.481 * units.inch,
        steps: 200
    )

    chevy_bbc_camshaft_builder camshaft(
        lobe_profile: stock_454_intake_lobe_profile(),
          intake_lobe_profile: stock_454_lobe_profile_int(),
          exhaust_lobe_profile: stock_454_lobe_profile_exh()
		 
    )

    b0.set_cylinder_head (
        chevy_bbc_peanut_port_head(
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0
        )
    )
    b1.set_cylinder_head (
        chevy_bbc_peanut_port_head(
            intake_camshaft: camshaft.intake_cam_1,
            exhaust_camshaft: camshaft.exhaust_cam_1,
            flip_display: true
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 32 * units.deg)
        .add_sample(1000 * units.rpm, 32 * units.deg)
        .add_sample(2000 * units.rpm, 32 * units.deg)
        .add_sample(3000 * units.rpm, 36 * units.deg)
        .add_sample(4000 * units.rpm, 36 * units.deg)
        .add_sample(5000 * units.rpm, 36 * units.deg)
        .add_sample(6000 * units.rpm, 38 * units.deg)
		.add_sample(7000 * units.rpm, 38 * units.deg)
		.add_sample(8000 * units.rpm, 38 * units.deg)
        .add_sample(9000 * units.rpm, 40 * units.deg)
        .add_sample(10000 * units.rpm, 40 * units.deg)
        .add_sample(11000 * units.rpm, 40 * units.deg)
		

    engine.add_ignition_module(
        chevy_bbc_distributor(
            wires: wires,
            timing_curve: timing_curve,
            rev_limit: 11000 * units.rpm
			))
	
}


public node main {
	use_default_theme()
    set_engine(DFV())
    set_vehicle(vehicle)
    set_transmission(vehicle_gearbox())
}
